{"version":3,"sources":["user.router.js"],"names":["express","require","app","Router","User","post","req","res","body","email","password","findOne","user","send","token","status","massage","name","surname","existUser","create","module","exports"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,GAAG,GAAGF,OAAO,CAACG,MAAR,EAAZ;;AACA,IAAMC,IAAI,GAAGH,OAAO,CAAC,cAAD,CAApB;;AAEAC,GAAG,CAACG,IAAJ,CAAS,QAAT,EAAmB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACWD,GAAG,CAACE,IADf,EACTC,KADS,aACTA,KADS,EACFC,QADE,aACFA,QADE;AAAA;AAAA;AAAA,0CAGEN,IAAI,CAACO,OAAL,CAAa;AAAEF,YAAAA,KAAK,EAALA;AAAF,WAAb,CAHF;;AAAA;AAGXG,UAAAA,IAHW;;AAIf,cAAIA,IAAJ,EAAU;AACR,gBAAIA,IAAI,CAACF,QAAL,KAAkBA,QAAtB,EAAgC;AAC9BH,cAAAA,GAAG,CAACM,IAAJ,CAAS;AACPC,gBAAAA,KAAK,YAAKL,KAAL,cAAcC,QAAd;AADE,eAAT;AAGD,aAJD,MAIO;AACLH,cAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBF,IAAhB;AACD;AACF,WARD,MAQO;AACLN,YAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB,gBAArB;AACD;;AAdc;AAAA;;AAAA;AAAA;AAAA;AAgBfN,UAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB,YAAEG,OAAvB;;AAhBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAoBAd,GAAG,CAACG,IAAJ,CAAS,SAAT,EAAoB,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,uBACyBD,GAAG,CAACE,IAD7B,EACVS,IADU,cACVA,IADU,EACJC,OADI,cACJA,OADI,EACKT,KADL,cACKA,KADL,EACYC,QADZ,cACYA,QADZ;AAAA;AAAA;AAAA,0CAIMN,IAAI,CAACO,OAAL,CAAa;AAAEF,YAAAA,KAAK,EAALA;AAAF,WAAb,CAJN;;AAAA;AAIZU,UAAAA,SAJY;;AAAA,eAMZA,SANY;AAAA;AAAA;AAAA;;AAOdZ,UAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB,0CAArB;AAPc;AAAA;;AAAA;AAAA;AAAA,0CASGT,IAAI,CAACgB,MAAL,CAAY;AAC3BH,YAAAA,IAAI,EAAJA,IAD2B;AAE3BC,YAAAA,OAAO,EAAPA,OAF2B;AAG3BT,YAAAA,KAAK,EAALA,KAH2B;AAI3BC,YAAAA,QAAQ,EAARA;AAJ2B,WAAZ,CATH;;AAAA;AASVE,UAAAA,IATU;AAgBdL,UAAAA,GAAG,CAACM,IAAJ,CAAS;AACPC,YAAAA,KAAK,YAAKL,KAAL,cAAcC,QAAd;AADE,WAAT;;AAhBc;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqBhBH,UAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB,aAAEG,OAAvB;;AArBgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;AAyBAK,MAAM,CAACC,OAAP,GAAiBpB,GAAjB","sourcesContent":["const express = require(\"express\");\r\nconst app = express.Router();\r\nconst User = require(\"./user.model\");\r\n\r\napp.post(\"/login\", async (req, res) => {\r\n  const { email, password } = req.body;\r\n  try {\r\n    let user = await User.findOne({ email });\r\n    if (user) {\r\n      if (user.password === password) {\r\n        res.send({\r\n          token: `${email}#${password}`,\r\n        });\r\n      } else {\r\n        res.status(401).send(`password is not match`);\r\n      }\r\n    } else {\r\n      res.status(404).send(\"user not found\");\r\n    }\r\n  } catch (e) {\r\n    res.status(404).send(e.massage);\r\n  }\r\n});\r\n\r\napp.post(\"/signup\", async (req, res) => {\r\n  const { name, surname, email, password } = req.body;\r\n\r\n  try {\r\n    let existUser = await User.findOne({ email });\r\n\r\n    if (existUser) {\r\n      res.status(404).send(\"email id already exist try another email\");\r\n    } else {\r\n      let user = await User.create({\r\n        name,\r\n        surname,\r\n        email,\r\n        password,\r\n      });\r\n\r\n      res.send({\r\n        token: `${email}#${password}`,\r\n      });\r\n    }\r\n  } catch (e) {\r\n    res.status(404).send(e.massage);\r\n  }\r\n});\r\n\r\nmodule.exports = app;\r\n"],"file":"user.router.dev.js"}